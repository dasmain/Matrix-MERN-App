API TRACK

--EMPLOYEE--

1. get empDetails by email and password (login)

http://localhost:5000/api/login?email=<insert>&password=<insert>

2. get all employees

http://localhost:5000/api/itdept/employee

3. get 1 employee by id

http://localhost:5000/api/itdept/employee/details?id=<insert>

4. add an employee

http://localhost:5000/api/itdept/employee

//dont add id that is auto generated and the rest of fields are given in body, like so,
{
	"name": "ibrahim ahmed shiekh",
	"designation": "worker",
	"email": "dombro@gmail.com",
	"phone": 3364457195,
	"attendance": 85,
	"salary": 44462,
	"address": "xyz",
	"cnic": "1231312313131",
	"date_of_birth": "17/01/2002",
	"department": "it",
	"gender": "others",
	"password": "admin"
}

5. update an employee

http://localhost:5000/api/itdept/employee?id=<insert>

//all the rest is given in body


6. delete an employee

http://localhost:5000/api/itdept/employee?id=<insert>


--LOGISTICS--


1. get all shippings

http://localhost:5000/api/logistics

2. get 1 by id

http://localhost:5000/api/logistics?id=<insert>

3. get logistics by name

http://localhost:5000/api/logistics?name=<insert>

4. get all pending logistics

http://localhost:5000/api/logistics?delivery_status=pending

5. get all delivered logistics

http://localhost:5000/api/logistics?delivery_status=delivered

6. get logistics by amount

http://localhost:5000/api/logistics?amount=<insert>

7. add a shipment 

http://localhost:5000/api/logistics

//dont add id that is auto generated and the rest of fields are given in body, like so,
{
	"name": "seedfarm",
	"amount": 7000,
	"delivery_date": "13/01/2023",
	"delivery_status": "pending",
	"location": "xyz" 
}

8. delete a shipment

http://localhost:5000/api/logistics?id=<insert>

9. update delivery status

http://localhost:5000/api/logistics?id=<insert>


--TASKS--

1. get all tasks

http://localhost:5000/api/tasks

2. add a task

http://localhost:5000/api/tasks 
//dont add id that is auto generated and the rest of fields are given in body, like so,
{
	"name": "",
	"description": "",
	"assign_date": "",
	"deadline": "",
	"emp_id": 
}

3. delete a task

http://localhost:5000/api/tasks?id=<insert>

4. mark as completed

http://localhost:5000/api/tasks?id=<insert>
//no need to do anything just call this on "mark as completed" button
//it will auto set completed: current date and status: "completed"

5. get 1 employees tasks

http://localhost:5000/api/mytasks?id=<insert>


--BONUSES--


1. get all bonuses

http://localhost:5000/api/bonuses

2. get 1 employees bonuses

http://localhost:5000/api/mybonuses?id=<insert>

3. add a bonus

http://localhost:5000/api/bonuses

{
	"name": "",
	"amount": "",
	"emp_id": "" 
}

4. delete a bonus

http://localhost:5000/api/bonuses?id=<insert>


--MACHINE INFO--

1. get all machines

http://localhost:5000/api/machines

2. update status to needs maintenance

http://localhost:5000/api/machines/needs?id=<insert machine id>

3. update status to under maintenance

http://localhost:5000/api/machines/under?id=<insert>

4. update status to operational

http://localhost:5000/api/machines/ok?id=<insert>&emp_id=<employee id from login>


--REFINERY--

1. get all purities

http://localhost:5000/api/purities

2. add a purity

http://localhost:5000/api/Purities
{
	"name": "blahblah",
	"amount": "",
	"beanSizeScore": "",
	"beanColorScore": "",
	"beanConsistencyScore": "",
	"beanFreshnessScore": "",
	"beanStiffIndexScore": "",
	"beanRipeIndexScore": "",
	"emp_id": <insert from login>
}

3. update a purity 

http://localhost:5000/api/purities?id=<insert>
//give the rest in body like add

4. delete a purity

http://localhost:5000/api/purities?id=<insert>


--ATTENDANCE--

1. get attendance by id

http://localhost:5000/api/attendance?id=<insert>

2. add attendance

http://localhost:5000/api/attendance
//only need to send the employee id that is selected from the employee list
{
	emp_id: ""
}